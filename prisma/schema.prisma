generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  nickname  String
  avatarUrl String?

  level            Int @default(0)
  point            Int @default(0)
  xp               Int @default(0)
  warn             Int @default(0)
  attendanceStreak Int @default(0)

  lastKoreanbotsHeart DateTime?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transactions      Transaction[]
  leaderboard       Leaderboard?
  purchase          Purchase[]
  warnHistory       WarnHistory[]
  xpEvent           XpEvent[]
  personalChannel   PersonalChannel[]
  AttendanceHistory AttendanceHistory[]

  @@map("user")
}

model Transaction {
  id     Int    @id @default(autoincrement())
  userId String

  amount Int

  source TransactionSource
  type   TransactionType
  reason String?

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchase  Purchase[]

  @@map("transaction")
}

enum TransactionSource {
  XP
  POINT
}

enum TransactionType {
  EARN
  SPEND
  REFUND
}

model Leaderboard {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  xp             Int
  level          Int
  currentRank    Int
  previousRank   Int
  rankDifference Int
  updatedAt      DateTime @updatedAt

  @@map("leaderboard")
}

model Product {
  id Int @id @default(autoincrement())

  name            String
  price           Int
  productImageUrl String
  description     String?
  type            ProductType @default(OTHER)

  isHidden Boolean @default(false)

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  purchase               Purchase[]
  productRole            ProductRole[]
  productXpBoost         ProductXpBoost[]
  productPersonalChannel ProductPersonalChannel[]

  @@map("product")
}

enum ProductType {
  PERSONAL_CHANNEL // 개인 채널
  ROLE // 역할
  CULTURAL_VOUCHER // 문화 상품권
  GIFTICONS // 기프티콘
  EXPERIENCE_BOOST // 경험치 부스트
  GOODS // 굿즈
  OTHER // 기타
}

model ProductRole {
  id Int @id @default(autoincrement())

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  roleId String

  @@map("product_role")
}

model ProductXpBoost {
  id Int @id @default(autoincrement())

  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id])

  boostAmount Int @default(100)
  boostDays   Int @default(30)

  @@map("product_xp_boost")
}

model ProductPersonalChannel {
  id Int @id @default(autoincrement())

  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id])

  channelDays Int @default(30)

  @@map("product_personal_channel")
}

model Purchase {
  id String @id @default(cuid())

  price  Int
  status PurchaseStatus

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  transactionId Int?
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchase")
}

enum PurchaseStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model XpEvent {
  id   Int    @id @default(autoincrement())
  name String

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  roleId    String?
  channelId String?
  xp        Int

  startDate DateTime
  endDate   DateTime?

  @@map("xp_event")
}

model WarnHistory {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  warnTypeId Int
  warnType   WarnType @relation(fields: [warnTypeId], references: [id])

  reason String?
  weight Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("punishment_history")
}

model WarnType {
  id Int @id @default(autoincrement())

  name        String
  description String?
  weight      Int           @default(1)
  warnHistory WarnHistory[]

  @@map("warn_type")
}

model PersonalChannel {
  id Int @id @default(autoincrement())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  startDate DateTime
  endDate   DateTime?

  channelId String

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("personal_channel")
}

model AttendanceHistory {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  date DateTime @default(now())

  @@map("attendance_history")
}
